fancy_echo() {
  printf "\n%b\n" "$1"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="$2"

  if [[ -w "$HOME/.zshrc.local" ]]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if (( skip_new_line )); then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}



trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

fancy_echo "Updating system packages ..."
 if command -v aptitude >/dev/null; then
    fancy_echo "Using aptitude ..."
  else
    fancy_echo "Installing aptitude ..."
    sudo apt-get install -y aptitude
  fi
  sudo aptitude update
  sudo aptitude -y dist-upgrade

fancy_echo "Installing git, for source control management ..."
  sudo aptitude install -y git

fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
  sudo aptitude install -y exuberant-ctags

fancy_echo "Installing neovim ..."
  sudo aptitude install -y neovim

fancy_echo "Installing curl ..."
  sudo aptitude install -y curl

fancy_echo "Installing zsh ..."
  sudo aptitude install -y zsh

fancy_echo "Changing your shell to zsh ..."
  chsh -s $(which zsh)
if [[ ! -d "$HOME/.nodenv" ]]; then
  fancy_echo "Installing nodenv to manage node versions ..."
    git clone https://github.com/nodenv/nodenv.git ~/.nodenv

    append_to_zshrc 'export PATH="$HOME/.nodenv/bin:$PATH"'
    append_to_zshrc 'eval "$(nodenv init - zsh --no-rehash)"' 1
    export PATH="$HOME/.nodenv/bin:$PATH"
    eval "$(nodenv init - zsh)"
  fi

if [[ ! -d "$HOME/.nodenv/plugins/node-build" ]]; then
  fancy_echo "Install node-build, to install Node versions ..."
    git clone https://github.com/nodenv/node-build.git $(nodenv root)/plugins/node-build
fi
fancy_echo "Installing the version of Node used for Lando ..."
  LANDO_NODE=$(curl -sSL https://raw.githubusercontent.com/lando/lando/master/.node-version)

fancy_echo "Setting $LANDO_NODE as the global default Node ..."
  nodenv install -s $LANDO_NODE
  nodenv rehash

fancy_echo "Setting up RCM to manage dotfiles ..."
  if ! command -v rcup >/dev/null; then
    wget -qO - https://apt.thoughtbot.com/thoughtbot.gpg.key | sudo apt-key add -
    echo "deb https://apt.thoughtbot.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/thoughtbot.list
    sudo aptitude update
    sudo aptitude install rcm
  fi

fancy_echo "Making sure you're setup for ssh ..."
  if [ ! -f ~/.ssh/id_rsa.pub ]; then
    fancy_echo "Enter your email and then press [ENTER]:"
    read email
    ssh-keygen -t rsa -b 4096 -C "$email"
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_rsa
  fi
fancy_echo "Setting up Hub ..."
  if ! command -v hub >/dev/null; then
    # Install binary and documentation
    sudo add-apt-repository ppa:cpick/hub
    sudo aptitude update
    sudo aptitude install hub

    # add alias
    append_to_zshrc "$(hub alias -s)"
  fi
fancy_echo "Installing Docker ..."
  if ! command -v docker >/dev/null; then
    sudo aptitude remove docker docker-engine docker.io
    sudo aptitude install \
      apt-transport-https \
      ca-certificates \
      curl \
      software-common-properties
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository \
      "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
      bionic \
      stable"
    sudo aptitude update
    sudo aptitude install docker-ce
    sudo usermod -aG docker $USER
    fancy_echo "Don't forget to logout and back in for Docker to work!"
  fi

fancy_echo "Picking Lando up from Cloud City ..."
  if ! command -v lando >/dev/null; then

  fi
fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [ -f ~/.laptop.local ]; then
    source ~/.laptop.local
  fi

